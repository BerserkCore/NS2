<shader_template>
	<code>
	<![CDATA[
		struct VS_INPUT
		{
			float4 ssPosition	          : POSITION;
			float2 texCoord               : TEXCOORD0;
		};

		struct VS_OUTPUT
		{
			float4 ssPosition	          : POSITION;
			float4 color                  : COLOR0;
			float2 texCoord               : TEXCOORD0;
		};

		struct PS_INPUT
		{
			float4 color                  : COLOR0;
			float2 texCoord               : TEXCOORD0;
		};

		struct Material
		{
			float4	resultColor;
		};

		float4x4    objectToWorldMatrix     : WORLD;
		float4x4    worldToScreenMatrix     : VIEWPROJECTION;
		float4x4    worldToCameraMatrix     : VIEW;

		// Not used here but needed by the template code.
		bool		anisotropicFiltering = false;

		float		time;

		float4 blendColor = float4(1, 1, 1, 1);

		////// Begin surface shader
		%SURFACE_SHADER%
		////// End surface shader

		VS_OUTPUT BasicVS(VS_INPUT input)
		{
			
			VS_OUTPUT output;
			
			output.ssPosition   = mul(input.ssPosition, objectToWorldMatrix);
			output.color        = blendColor;
			output.texCoord     = input.texCoord;

			return output;
			
		}
						
		float4 BasicPS(uniform bool textured, PS_INPUT input) : COLOR0
		{
			Material material;
			MaterialShader(textured, input.texCoord, input.color, material);
			return material.resultColor;
		}

		technique Fill(Color, Textured)[Add,Multiply][UseStencilEqual,UseStencilNotEqual]
		{
			pass p0
			{
				VertexShader			= compile vs_2_0 BasicVS();
				PixelShader				= compile ps_2_0 BasicPS(Textured);
				CullMode            	= None;
				AlphaBlendEnable    	= True;
				SrcBlend            	= SrcAlpha;
				DestBlend           	= InvSrcAlpha;
			#if Add
				SrcBlend            	= SrcAlpha;
				DestBlend           	= One;	
			#endif
			#if Multiply
				SrcBlend            	= Zero;
				DestBlend           	= SrcColor;	
			#endif
			#if UseStencilEqual
				StencilEnable       	= True;
				StencilFunc         	= Equal;
			#endif
			#if UseStencilNotEqual
				StencilEnable       	= True;
				StencilFunc         	= NotEqual;
			#endif
				ZEnable                 = False;
				ZWriteEnable			= False;
			}
		}

		technique Stencil(Color, Textured)
		{
			pass p0
			{	
				VertexShader        	= compile vs_2_0 BasicVS();
				PixelShader         	= compile ps_2_0 BasicPS(Textured);
				CullMode            	= None;
				StencilEnable       	= True;
				StencilPass         	= Replace;
				StencilRef          	= 1;
				ColorWriteEnable    	= 0;
				ZEnable             	= False;
				ZWriteEnable			= False;
				AlphaTestEnable     	= True;
				AlphaFunc           	= Greater;
				AlphaRef            	= 128;
			}
		}
	]]>
	</code>
</shader_template>		