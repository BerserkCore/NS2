<shader>
	
	<inputs>
		<input name="albedoMap" type="texture" address="wrap" />
		<input name="normalMap" type="texture" address="wrap" />
		<input name="specularMap" type="texture" address="wrap" />
		<input name="opacityMap" type="texture" address="wrap" />
		<input name="endTime" type="float">0.0</input>
		<input name="scale" type="float">0.0</input>
	</inputs>

	<params>
		<param name="alphaTest">true</param>
		<param name="osPosition">true</param>
	</params>

	<code>
	<![CDATA[
		float3 DecodeNormal(const float4 texNormal)
		{
			float4 n = texNormal * 2 - 1;
			return n.xyz;
		}
		void MaterialShader(in Material_Input input, inout Material material)
		{
			float intensity = 1.0;

			if (endTime != 0) {
				intensity = clamp( (endTime - time)/1, 0, 1);			
			}
			
			float2 texCoord = input.texCoord;
			
			if (scale != 0) {
				
				float smoothEdge = abs(input.osPosition.y / scale) * 0.5;
				texCoord.x = clamp(texCoord.x + smoothEdge, -1, 1);
				texCoord.y = clamp(texCoord.y - smoothEdge, -1, 1);
				
				float distance = length(input.osPosition);				
				intensity *= clamp(1 - (distance / (scale * 0.5)) * (abs(input.osPosition.y) / (scale * 0.5)), 0, 1);
				
			}
			
			float4 specularGloss = tex2D(specularMap, texCoord);			
		
			material.albedo 	= tex2D(albedoMap, texCoord).rgb;
			material.tsNormal 	= DecodeNormal( tex2D(normalMap, texCoord) );
			material.specular	= specularGloss.rgb * intensity;
			material.gloss		= specularGloss.a * intensity;
			material.opacity    = tex2D(opacityMap, texCoord).r * intensity;
			
		}
	]]>		
	</code>

</shader>