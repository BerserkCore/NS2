<shader>		<inputs>		<input name="albedoMap" type="texture" address="wrap" />		<input name="normalMap" type="texture" address="wrap" />		<input name="attackTime" type="float" />	</inputs>	<params>		<param name="alphaTest">true</param>		<param name="slopeScaleBias">-0.1</param>	</params>	<code>	<![CDATA[		float3 DecodeNormal(const float4 texNormal)		{			float4 n = texNormal * 2 - 1;		    return n.xyz;		}		void MaterialShader(in Material_Input input, inout Material material)		{					const float3 tint 				= float3(1, 0, 0);					const float bloodDissolveSpeed 	= 0.8;			const float startBloodOpacity  	= 0.4;						const float2 albedoScale       	= float2(2.5, 1.8);			const float2 albedoScrollSpeed 	= float2(0, -0.1);			const float2 normalScale       	= float2(1.5, 1.8);			const float2 normalScrollSpeed 	= float2(0, -0.12);						const float opacityScale1 		= float2(1.1, 0.5);			const float opacityScale2 		= float2(1.8, 1.4);					float t = time - attackTime;						float opacity1 = tex2D( albedoMap, input.texCoord * opacityScale1 + t * float2(0.10, -0.10) ).a;			float opacity2 = tex2D( albedoMap, input.texCoord * opacityScale2 + t * float2(0.05, -0.12) ).a;			float opacity = opacity1 * opacity2;					material.albedo   = tex2D( albedoMap, input.texCoord * albedoScale + t * albedoScrollSpeed ).rgb * tint;			material.opacity  = (opacity - t * bloodDissolveSpeed + startBloodOpacity);			material.tsNormal = DecodeNormal( tex2D( normalMap, input.texCoord * normalScale + t * normalScrollSpeed ) );			material.specular = float3(1, 0.5, 0.5); 			material.gloss    = 100;					}	]]>	</code></shader>