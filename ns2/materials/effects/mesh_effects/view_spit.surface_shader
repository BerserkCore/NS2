<shader>		<inputs>		<input name="albedoMap" type="texture" address="wrap" />		<input name="normalMap" type="texture" address="wrap" />		<input name="attackTime" type="float" />	</inputs>	<params>		<param name="alphaTest">true</param>		<param name="slopeScaleBias">-0.1</param>	</params>	<code>	<![CDATA[		float3 DecodeNormal(const float4 texNormal)		{			float4 n = texNormal * 2 - 1;            return n.xyz;		}		void MaterialShader(in Material_Input input, inout Material material)		{					const float3 tint 				= float3(1, 1, 0);			const float3 tint2              = float3(1, 0.7, 0);					const float bloodDissolveSpeed 	= 0.8;			const float startBloodOpacity  	= 0.4;						const float2 normalScale       	= float2(1.5, 1.8);			const float2 normalScrollSpeed 	= float2(0, -0.05);			const float opacityScale1 		= float2(1, 2);							float t = time - attackTime;						float opacity = tex2D( albedoMap, input.texCoord * opacityScale1 + attackTime * float2(0.1, -0.0) ).a;						float3 color = tint - t * tint2;					material.albedo  = opacity * color ;			material.opacity  = clamp( (opacity - t * bloodDissolveSpeed + startBloodOpacity), 0.0, 1.0 );			material.specular = color * 0.4;			material.tsNormal = DecodeNormal( tex2D( normalMap, input.texCoord * normalScale + t * normalScrollSpeed ) );					}	]]>	</code></shader>