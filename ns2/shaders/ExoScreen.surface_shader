<shader>

    <inputs>
        <input name="albedoMap" type="texture" address="wrap" />
      	 <input name="normalMap" type="texture" address="wrap" />
      	<input name="specularMap" type="texture" address="wrap" />
        <input name="emissiveMap" type="texture" address="wrap" srgb="true"/>
        <input name="blendMap" type="texture" address="wrap">models/effects/forcefield_tile.dds</input>
        <input name="exoMap" type="texture" address="wrap">models/effects/exo_screen.dds</input>
		<input name="scanlinesMap" type="texture" address="wrap">ui/exosuit_scanlines.dds</input>
        <input name="dissolveAmount" type="float">0.0</input>
		<input name="closeAmount" type="float">0.0</input>
    </inputs>
    
    <params>
        <param name="alphaTest">true</param>
        <param name="osPosition">true</param>
		<param name="vsNormal">true</param>
    </params>
    
    <code>
    <![CDATA[
        float paramQuick(float x, float p)
        {
            return pow(x,p);
        }
        
        float paramSlow(float x, float p)
        {
            x -= 1;
            return -abs(pow(x,p)) + 1.0;
        }
		float3 DecodeNormal(const float4 texNormal)
		{
			float4 n = texNormal * 2 - 1;
			//return float3(n.a, n.g, sqrt(1 - dot(n.ag, n.ag)) );
			return n.xyz;
		}
        
        void MaterialShader(in Material_Input input, inout Material material)
        {
        
            float f = 1 - dissolveAmount;


	float blendcir3 = tex2D(exoMap, input.texCoord * float2(1, 1)).rgb;
	float blendcir = tex2D(blendMap, input.texCoord * float2(8, 8)+ float2(time * .1, time * .25)).rgb;
	float blendcir2 = tex2D(blendMap, input.texCoord * float2(0.05, 4) + float2(time * -.1, time * .15)).rgb;
            float param =  blendcir3 + (blendcir*blendcir2)+ 0.1;
			float textureSpeed = 2;
			float destroySpeed = 1;
            
			float4 specularGloss = tex2D(specularMap, input.texCoord);
			
			float3 albedo   = tex2D(albedoMap, input.texCoord).rgb;
			float3 emissive = tex2D(emissiveMap, input.texCoord).rgb;
			float3 light    = max(-input.vsNormal.z, 0) * 0.5;
			
			// Hacky specular inside the cockpit.
			float3 specular = pow(saturate(dot(input.vsNormal, normalize(float3(0, 1, -1)))), 100) * specularGloss.rgb;
	
			float closeFraction = pow(closeAmount, 4);
	
			material.albedo 	= albedo * (1 - closeFraction);
			material.tsNormal 	= DecodeNormal( tex2D(normalMap, input.texCoord) );
			material.specular	= specularGloss.rgb * (1- closeFraction);
			material.gloss		= specularGloss.a;
            
            float opacity = paramSlow(param, destroySpeed);
            float blend = paramQuick(param, textureSpeed);
            
			material.emissive   = emissive + (light * albedo + specular) * closeFraction;
			
            // Blending
            if (blend + f > 1)
            {
            
            }
            else
            {
                material.emissive += 3 * ((1 - (blend + f)) * tex2D(scanlinesMap, input.texCoord * float2(1, 70)+ float2(0, time * -.75)).rgb * float3(2.2, 4.2, 6) );
            }
            
            // Opacity
            material.opacity = opacity + f - 0.5;
            if (material.opacity < 0.5)
            {
                material.opacity = 0.2;
                material.albedo.rgb = 0;
				float4 scanlines = tex2D(scanlinesMap, input.osPosition.xy * 50 + float2(time * .02, time * - .25));
				material.emissive = scanlines.rgb * scanlines.a * 0.1;
				
            }
            
        }
    ]]>
    </code>

</shader>