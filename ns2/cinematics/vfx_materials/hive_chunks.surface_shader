<shader>
	
	<inputs>
		<input name="albedoMap" type="texture" address="wrap" />
		<input name="normalMap" type="texture" address="wrap" />
		<input name="specularMap" type="texture" address="wrap" />
		<input name="emissiveMap" type="texture" address="wrap" srgb="true"/>
		<input name="fireglowMap" type="texture" address="wrap" srgb="true"/>

		<input name="blendMap" type="texture" address="wrap"></input>
		<input name="overlayMap" type="texture" address="wrap">models/misc/infestation/infestation.dds</input>
        	<input name="hiddenAmount" type="float">0</input>
		<input name="glowIntensity" type="float">1.0</input>
		<input name="tint" type="float3">(1, 1, 1)</input>

	</inputs>
	
	<params>
		<param name="alphaTest">true</param>
		
	</params>
	
	<code>
	<![CDATA[
		float paramQuick(float x, float p) {
			return pow(x,p);
		}
		
        float paramSlow(float x, float p) {
			return 1 - pow(abs(x - 1),p);
		}
		
		float3 DecodeNormal(const float4 texNormal)
		{
			float4 n = texNormal * 2 - 1;
			//return float3(n.a, n.g, sqrt(1 - dot(n.ag, n.ag)) );
      return n.xyz;
		}
		
		void MaterialShader(in Material_Input input, inout Material material)
		{
		
			
			float f             = 1-hiddenAmount;

			float param         = tex2D(blendMap, input.texCoord).r; // speading parameter
			float textureSpeed  = 1;
			float destroySpeed  = 1.5;
			float3 fireGlow	=tex2D(fireglowMap, input.texCoord*1 ).rgb* tint;
			float3 fireGlow2 = tex2D(fireglowMap, input.texCoord * float2(6,1) + float2(time * .01, time * -.05)).rgb* tint;


			float4 specularGloss = tex2D(specularMap, input.texCoord);
			material.tsNormal 	= DecodeNormal( tex2D(normalMap, input.texCoord) );			
			material.specular	= specularGloss.rgb;
			material.gloss		= specularGloss.a;
			
			float opacity       = paramSlow(param,destroySpeed);
			float blend         = paramQuick(param,textureSpeed);
			
			// Blending
			if (blend + f > .5)
			{
				material.albedo = tex2D(albedoMap, input.texCoord).rgb+(fireGlow*fireGlow2);
 				material.emissive   = ((tex2D(emissiveMap, input.texCoord).rgb )) * f * glowIntensity;

			} else {
			    	material.albedo = tex2D(overlayMap, input.texCoord*4 ).rgb +(fireGlow*fireGlow2);
			}
				

			material.opacity = (opacity  + f) ;

		}
	]]>
	</code>

</shader>