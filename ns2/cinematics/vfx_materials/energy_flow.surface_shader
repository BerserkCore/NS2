<shader>
	
	<inputs>
		<input name="emissiveMap" type="texture" address="wrap" srgb="true"/>
		<input name="cloudMap" type="texture" address="wrap" srgb="true"/>
		<input name="normalMap" type="texture" address="wrap" />
	</inputs>

	<params>
		<param name="wsNormal">true</param>
		<param name="vsNormal">true</param>
		<param name="osPosition">true</param>
		<param name="twoSided">true</param>

	</params>
	<code>
	<![CDATA[
		float3 DecodeNormal(const float4 texNormal)
		{
			float4 n = texNormal * 2 - 1;
			//return float3(n.a, n.g, sqrt(1 - dot(n.ag, n.ag)) );
			return n.xyz;
		}
		void MaterialShader(in Material_Input input, inout Material material)
		{
			const float3 tint = float3(1, 3, 20);
			float4 tex3 = tex2D(cloudMap, input.texCoord*2 + float2(time * 1, time * 0.5));
			float4 tex2 = tex2D(emissiveMap, input.texCoord*.3+ float2(time * -.2, time * -.5));
			float4 tex = tex2D(emissiveMap, input.texCoord*1.5 + float2(time * .5, time * -0.8) + (DecodeNormal( tex2D(normalMap, input.texCoord*3 + float2(time * -1, time * 2)) ).xy * .1 ));
					
			
			material.emissive =(tex.rgb + tex2.rgb)  * tint  ;
			material.opacity  = (tex.rgb+tex2.rgb ) ;			
		}
	]]>		
	</code>

</shader>