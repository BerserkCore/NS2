<shader>
	
	<inputs>
		<input name="albedoMap" type="texture" address="wrap" />
		<input name="normalMap" type="texture" address="wrap" />
		<input name="opacityMap" type="texture" address="wrap" />
		<input name="emissiveMap" type="texture" address="wrap" srgb="true"/>
		<input name="endTime" type="float">0.0</input>
		<input name="scale" type="float">0.0</input>
	</inputs>

	<params>
		<param name="alphaTest">true</param>
		<param name="osPosition">true</param>
		<param name="wsNormal">true</param>
		<param name="vsNormal">true</param>
		<param name="twoSided">false</param>
		<param name="alphaTest">true</param>
		<param name="slopeScaleBias">-0.1</param>
	</params>

	<code>
	<![CDATA[
		float3 DecodeNormal(const float4 texNormal)
		{
			float4 n = texNormal * 2 - 1;
			return n.xyz;
		}
		void MaterialShader(in Material_Input input, inout Material material)
		{
			float intensity = 1.0;

			if (endTime != 0) {
				intensity = clamp( (endTime - time)/1, 0, 1);			
			}
			
			float2 texCoord = input.texCoord;
			
			if (scale != 0) {
				
				float smoothEdge = abs(input.osPosition.y / scale) * 0.5;
				texCoord.x = clamp(texCoord.x + smoothEdge, -1, 1);
				texCoord.y = clamp(texCoord.y - smoothEdge, -1, 1);
				
				float distance = length(input.osPosition);				
				intensity *= clamp( 1 - (distance / (scale * 0.5)) * (abs(input.osPosition.y) / (scale * 0.5)), 0, 1);
				
			}
			
			const float3 tint = float3(.4, .42, .12);
			const float3 tint2 = float3(10, 5, 1);
			
			float3 bubbles = tex2D( emissiveMap, texCoord * 6).rgb;
			float3 Noisenormal = DecodeNormal( tex2D( normalMap, texCoord * 6 + float2( time * -.04, time * -.04) ) );
			float3 albedo1 = tex2D( albedoMap, texCoord * 4 + float2( time * .041, time * -.01) ).rgb;
			float3 albedo2 = tex2D( albedoMap, texCoord * 1.5  * float2(10, 9) + float2( time * .02, time * -.01) ).rgb;
			float3 noise = tex2D( albedoMap, (texCoord * 3  + float2(0, time * -.03)) * float2(.01, 0.03) ).rgb;
			float3 noise2 = tex2D( albedoMap, (texCoord * 2 + float2(0, time * -.02))).rgb;  
			
			float3 mask = pow(tex2D(opacityMap, texCoord).rgb, 2);
			
			material.albedo = (albedo1 * noise + albedo2) * tint;
			material.emissive = bubbles * noise2 * noise2 * tint2;
			material.opacity = (albedo1 + albedo2) * mask * intensity;
			material.tsNormal = Noisenormal;
			
		}
	]]>		
	</code>

</shader>