<shader>

	<inputs>
		<input name="glowpoints" type="texture" address="wrap" srgb="true"/>
		<input name="noiseMap" type="texture" address="wrap" srgb="true"/>
		<input name="opacityMap" type="texture" address="wrap" srgb="true"/>
		<input name="endTime" type="float">0.0</input>
		<input name="scale" type="float">0.0</input>
	</inputs>	

	<params>
		<param name="osPosition">true</param>
		<param name="wsPosition">true</param>
		<param name="wsNormal">true</param>
		<param name="vsNormal">true</param>
		<param name="twoSided">false</param>
		<param name="alphaTest">true</param>

	</params>
	
	<code> 
	<![CDATA[
		void MaterialShader(in Material_Input input, inout Material material)
		{		
			const float3 tint = float3(50, 8, 1);
			float intensity = 1.0;

			if (endTime != 0) {
				intensity = clamp( (endTime - time)/1, 0, 1);			
			}
			
			float2 texCoord = input.texCoord;
			
			if (scale != 0) {
				
				float smoothEdge = abs(input.osPosition.y / scale) * 0.5;
				texCoord.x = clamp(texCoord.x + smoothEdge, -1, 1);
				texCoord.y = clamp(texCoord.y - smoothEdge, -1, 1);
				
				float distance = length(input.osPosition);				
				intensity *= clamp( 1 - (distance / (scale * 0.5)) * (abs(input.osPosition.y) / (scale * 0.5)), 0, 1);
				
			}
			
			float mask = 1 - clamp(length(input.osPosition) / scale, 0, 1);
			float3 ash = tex2D( glowpoints, texCoord  * 9 ).rgb;
			float3 noise = tex2D( noiseMap, texCoord  * 2 - float2(time * .12, time * 0.3) ).rgb;
			float3 noise2 = tex2D( noiseMap, texCoord  * float2( 3.2, 2.7) - float2(time * -.2, time * .35) ).rgb;
			float3 noise3 = tex2D( noiseMap, texCoord  * float2( 1.8, 2.1) - float2(time * -.01, time * .03) ).rgb;

			material.emissive = ( noise * noise2 ) * tint * mask * intensity;
			material.opacity = ( (noise + noise2 ) * noise3 + ash) * mask * intensity;
			
		}
	]]>
	</code>

</shader>