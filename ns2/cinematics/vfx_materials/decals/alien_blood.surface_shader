<shader>
	
	<inputs>
		<input name="albedoMap" type="texture" address="wrap" />
		<input name="normalMap" type="texture" address="wrap" />
		<input name="specularMap" type="texture" address="wrap" />
		<input name="opacityMap" type="texture" address="wrap" />
		<input name="emissiveMap" type="texture" address="wrap" />
	</inputs>

	<params>
		<param name="alphaTest">true</param>
		<param name="vsNormal">true</param>
	</params>

	<code>
	<![CDATA[
		float3 DecodeNormal(const float4 texNormal)
		{
			float4 n = texNormal * 2 - 1;
			//return float3(n.a, n.g, sqrt(1 - dot(n.ag, n.ag)) );
			return n.xyz;
		}
		void MaterialShader(in Material_Input input, inout Material material)
		{
			const float3 tint = float3(4, 20, 1);
					
			float4 specularGloss = tex2D(specularMap, input.texCoord);
			float4 glowPoints = tex2D(emissiveMap, input.texCoord*6);
			float4 glowPoints2 = tex2D(emissiveMap, input.texCoord*2+ float2(time * .01, time * 0.01) );
			material.albedo 	= tex2D(albedoMap, input.texCoord).rgb;
			material.tsNormal 	= DecodeNormal( tex2D(normalMap, input.texCoord) );
			material.specular	= specularGloss.rgb ;
			material.gloss		= specularGloss.a;
			material.emissive	= glowPoints.rgb * glowPoints2.rgb  *tint;
			material.opacity    = tex2D(opacityMap, input.texCoord).r;
			
		}
	]]>		
	</code>

</shader>