<shader>

	<inputs>
		<input name="emissiveMap1" type="texture" address="wrap" srgb="true"/>
		<input name="emissiveMap2" type="texture" address="wrap" srgb="true"/>
		<input name="maskMap" type="texture" address="wrap" srgb="true"/>
		<input name="refractMap" type="texture" address="wrap" srgb="true"/>
		<input name="tint" type="float3" />  
		<input name="em1Coord" type="float4" />  
		<input name="em2Coord" type="float4" /> 
		<input name="maskCoord" type="float4" /> 
		<input name="normCoord" type="float4" /> 
		<input name="normIntensity" type="float">0.10</input> 
		<input name="scale" type="float"></input>
	</inputs>	

	<params>
		<param name="osPosition">true</param>
		<param name="wsPosition">true</param>
		<param name="wsNormal">true</param>
		<param name="vsNormal">true</param>

	</params>
	<code>
	<![CDATA[
		float3 DecodeNormal(const float4 texNormal)
		{
			float4 n = texNormal * 2 - 1;
			//return float3(n.a, n.g, sqrt(1 - dot(n.ag, n.ag)) );
			return n.xyz;
		}
		void MaterialShader(in Material_Input input, inout Material material)
		{
			
				float intensity = 1.0;

				float2 texCoord = input.texCoord;
				float smoothEdge = abs(input.osPosition.y / scale) * 0.5;
				texCoord.x = clamp(texCoord.x + smoothEdge, -1, 1);
				texCoord.y = clamp(texCoord.y - smoothEdge, -1, 1);
				
				float distance = length(input.osPosition);				
				intensity *= clamp(1 - (distance / (scale * 0.5)) * (abs(input.osPosition.y) / (scale * 0.5)), 0, 1);
	
		
			float4 emiss1 = tex2D(emissiveMap1, input.osPosition.xz  * float2(em1Coord.r, em1Coord.g) + float2( time * em1Coord.b, time * em1Coord.a)+ (DecodeNormal( tex2D(refractMap, input.osPosition.xz  * float2(normCoord.r, normCoord.g) + float2(time * normCoord.b, time * normCoord.a)) ).xy * normIntensity ));	
			


			float4 emiss2 = tex2D(emissiveMap2, input.osPosition.xz  * float2(em2Coord.r, em2Coord.g) + float2( time * em2Coord.b, time * em2Coord.a) + (DecodeNormal( tex2D(refractMap, input.osPosition.xz  * float2(normCoord.r, normCoord.g) + float2(time * normCoord.b, time * normCoord.a)) ).xy * normIntensity ));	
			float4 mask1 = tex2D(maskMap, input.texCoord * float2(maskCoord.r, maskCoord.g)+ float2(time *  maskCoord.b, time *  maskCoord.a));


			material.emissive 	=  (emiss1.rgb * emiss2.rgb )*mask1.rgb * tint *intensity  ;
		
			material.opacity 	= mask1.rgb *intensity  ;
			
		}
	]]>
	</code>

</shader>