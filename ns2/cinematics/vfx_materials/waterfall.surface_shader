<shader>

	<inputs>
		<input name="albedoMap" type="texture" address="wrap" srgb="true"/>
		<input name="normalMap" type="texture" address="wrap" srgb="true"/>
		<input name="EmissiveMap" type="texture" address="wrap" srgb="true"/>
		<input name="MaskMap" type="texture" address="wrap" srgb="true"/>

	</inputs>	

	<params>
		<param name="osPosition">true</param>
		<param name="wsNormal">true</param>
		<param name="vsNormal">true</param>
		<param name="twoSided">true</param>
		<param name="alphaTest">true</param>
		
	</params>
	
	<code> 
	<![CDATA[
		float3 DecodeNormal(const float4 texNormal)
		{
			float4 n = texNormal * 2 - 1;
			//return float3(n.a, n.g, sqrt(1 - dot(n.ag, n.ag)) );
      return n.xyz;
		}
		void MaterialShader(in Material_Input input, inout Material material)
		{
		
			const float3 tint = float3(.5, .55, .65);

			float3 bordermask = tex2D( MaskMap, input.texCoord * float2(1, 2) + float2( 0, time * -1.1)).rgb;
			float3 bubbles = tex2D( EmissiveMap, input.texCoord * float2(11, 35) + float2( time * .08, time * -3.93)).rgb;

			float3 bubbles2 = tex2D( EmissiveMap, input.texCoord * float2(5, 13.2) + float2( time * -.1, time * -3.3)).rgb;		
			float3 albedo1 = tex2D( albedoMap, input.texCoord * float2(4, 8.1) + float2(  time * -.02, time * -1.85) ).rgb;
			float3 albedo2 = tex2D( albedoMap, input.texCoord  * float2(3, 6.37) + float2( time * .5, time * -1.84) ).rgb;
			float fresnel =  pow(max(-input.vsNormal.z, 0), 1);
			float3 noise = tex2D( albedoMap, (input.texCoord * float2(1.3, .8)  + float2(time * -.02, time * -.5)) ).rgb;
			float3 noise2 = tex2D( albedoMap, (input.texCoord * float2(2.37, 2.53) + float2(0, time * -.82))).rgb;  

			float3 normal1 = DecodeNormal( tex2D( normalMap, input.texCoord * float2(4, 8.1) + float2(  time * -.1, time * -1.85) ) );

			material.emissive= ((albedo1 + albedo2 +  noise )) * tint + (bubbles*bubbles2)  *100 ;
			material.albedo= ( (albedo1  + albedo2)) ;
			material.opacity= ( (noise  + noise2))  * bordermask ;

			material.tsNormal= ( normal1) ;
			
		}
	]]>
	</code>

</shader>