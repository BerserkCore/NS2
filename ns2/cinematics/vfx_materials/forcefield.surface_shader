<shader>
	
	<inputs>
		
		<input name="glowpoints" type="texture" address="wrap" srgb="true"/>
		<input name="noiseMap" type="texture" address="wrap" srgb="true"/>
		<input name="maskMap" type="texture" address="wrap" srgb="true"/>

	</inputs>
	<params>
		<param name="osPosition">true</param>
		<param name="wsPosition">true</param>
		<param name="wsNormal">true</param>
		<param name="vsNormal">true</param>
		<param name="twoSided">false</param>

	</params>
	<code>
	<![CDATA[
	
		void MaterialShader(in Material_Input input, inout Material material)
		{


			const float3 tint = float3(16, 38, 55);
			
			// Offset the position.
			//material.wsOffset = input.wsNormal * 0.03;
			
			float3 mask = tex2D( maskMap, input.texCoord  * 6 + float2(time * 0, time * 0.2) ).rgb;
			float3 ash = tex2D( glowpoints, input.texCoord  * 2 ).rgb;
			float3 noise = tex2D( noiseMap, input.texCoord  * .02 + float2( time * -0.04, time * -0.1) ).rgb;
			float3 noise2 = tex2D( glowpoints, input.texCoord  * float2( 0.02, .5) + float2(time * -0.01, time * 0.05) ).rgb;
			float3 noise3 = tex2D( glowpoints, input.texCoord  * float2( 1.2, 1.1) + float2(0, time * .02) ).rgb;
			float fresnel =  pow(max(-input.vsNormal.z, 0), 5);

		
			

			material.emissive   =  ( noise * ash * noise3 * 10 * noise2 + (0.0008 * mask)) * tint;

			
		}
	]]>		
	</code>

</shader>