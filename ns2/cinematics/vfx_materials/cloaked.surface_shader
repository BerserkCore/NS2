<shader>

	<inputs>
		<input name="noiseMap" type="texture" address="wrap" />
		<input name="cloakAmount" type="float">0.0</input>
		<input name="distortAmount" type="float">0.0</input>
		<input name="normalMap"   type="texture" address="wrap">materials/dev/dev_normal.dds</input>
		<input name="friendly" type="float">0.0</input>
	</inputs>	

	<params>
		<param name="vsPosition">true</param>
		<param name="vsNormal">true</param>
		<param name="vsTangent">true</param>
		<param name="vsBinormal">true</param>
		<param name="twoSided">false</param>
	</params>
	
	<code>
	<![CDATA[
		float3 DecodeNormal(const float4 texNormal)
		{
			float4 n = texNormal * 2 - 1;
			//return float3(n.a, n.g, sqrt(1 - dot(n.ag, n.ag)) );
			return n.xyz;
		}		
		void MaterialShader(in Material_Input input, inout Material material)
		{	
			const float3 tint  = float3(0.4, 0.7, 1.0) * 0.8;
			const float3 tint2 = float3(0.4, 0.4, 1.0) * 0.1;
						
			float3 tsNormal = DecodeNormal( tex2D(normalMap, input.texCoord ) );

			float3 vsNormal = tsNormal.x * input.vsTangent +
							  tsNormal.y * input.vsBinormal +	
							  tsNormal.z * input.vsNormal;
									
			vsNormal = normalize(vsNormal);		
			
			// animate the amount of distortion by 50%
			float anim = (1 + cos(time * 5)) * 0.5;	
			// standing still = cloakAmount 1, max cloak speed = cloakAmount 0.7
			// standing still -> min distortion 0.001
			// moving at max cloak speed -> distortion 0.01
			float intensity = 1 - distortAmount;
			
			
			// go up to 90% and scale down again to hive the distort effect
			if (intensity > 0.95) {
				intensity = 1 - ((intensity - 0.95) / 0.05);
			}
			
			float distortionScalar = intensity * intensity * 0.15;
			
			material.ssDistortion = vsNormal.xy * float2(1, -1) * distortionScalar * (0.8 + anim);
			
			float3 vsView = normalize(input.vsPosition);
			
			float f = 1 - saturate(dot(vsView, -vsNormal));
			
			float3 noise = tex2D( noiseMap, input.texCoord  * 2 + float2(time * .25, time * 0.41)*0.2 ).rgb;
			float3 noise2 = tex2D( noiseMap, input.texCoord  * 1.5 + float2(time * .41, time * 0.25)*0.3 ).rgb;
			
			// Boost emissive for friendly players so they can be seen easily
			float emissiveIntensity = 0.0;
			if(friendly)
				emissiveIntensity = cloakAmount;
			material.emissive = (pow(f, 2) * noise * tint + noise2 * tint2) * emissiveIntensity;
		}
	]]>
	</code>

</shader>