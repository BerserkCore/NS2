<shader>

	<inputs>

		<input name="albedoMap" type="texture" address="wrap" srgb="true"/>
		<input name="refractMap" type="texture" address="wrap" srgb="true"/>
		<input name="scaleFactor" type="float">1.0</input>

	</inputs>	

	<params>
		<param name="osPosition">true</param>
		<param name="wsPosition">true</param>
		<param name="wsNormal">true</param>
		<param name="vsNormal">true</param>
		<param name="alphaTest">true</param>

	</params>
	<code>
	<![CDATA[
		float3 DecodeNormal(const float4 texNormal)
		{
			float4 n = texNormal * 2 - 1;
			//return float3(n.a, n.g, sqrt(1 - dot(n.ag, n.ag)) );
			return n.xyz;
		}
		void MaterialShader(in Material_Input input, inout Material material)
		{
		

			float4 bab1 = tex2D(albedoMap, input.texCoord*8*scaleFactor + float2( time * .15, time * 1.8)+ (DecodeNormal( tex2D(refractMap, input.texCoord*14 + float2(time * 3, time * 0.1)) ).xy * .15 ));

			float4 bab2 = tex2D(albedoMap, input.texCoord*6*scaleFactor + float2( time * -.15, time * 1.5)+ (DecodeNormal( tex2D(refractMap, input.texCoord*7 + float2(time * -5, time * 1)) ).xy * .1 ));
			float fresnel =  pow(max(-input.vsNormal.z, 0), 1);
		
			material.albedo 	= bab1.rgb + bab2.rgb;
			
			material.opacity 	= (bab1.a +bab2.a) *fresnel;
			
		}
	]]>
	</code>

</shader>