<shader>
	
	<inputs>
		<input name="albedoMap" type="texture" address="wrap" />
		<input name="unconnectedAlbedoMap" type="texture" address="wrap" />
		<input name="normalMap" type="texture" address="wrap" />
		<input name="specularMap" type="texture" address="wrap" />
		<input name="emissiveMap" type="texture" address="wrap" srgb="true"/>
		<input name="unconnectedEmissiveMap" type="texture" address="wrap" srgb="true"/>
		<input name="blendMap" type="texture" address="wrap">materials/effects/mesh_effects/skulk_view_blood.dds</input>
		<input name="overlayMap" type="texture" address="wrap">models/misc/infestation/infestation.dds</input>
        <input name="hiddenAmount" type="float">0.0</input>
		<input name="connected" type="float">1.0</input>
		<input name="maturity" type="float">0.0</input>
        <input name="killWarning" type="float">0.0</input>
	</inputs>
	
	<params>
		<param name="alphaTest">true</param>
	</params>
	
	<code>
	<![CDATA[
		float paramQuick(float x, float p) {
			return pow(x,p);
		}
		
		float paramSlow(float x, float p) {
			return 1 - pow(abs(x - 1),p);
		}
		
		float3 DecodeNormal(const float4 texNormal)
		{
			float4 n = texNormal * 2 - 1;
			//return float3(n.a, n.g, sqrt(1 - dot(n.ag, n.ag)) );
      return n.xyz;
		}
		
		void MaterialShader(in Material_Input input, inout Material material)
		{
		
			float f             = 1 - hiddenAmount;

			float param         = tex2D(blendMap, input.texCoord).a; // speading parameter
			float textureSpeed  = 2;
			float destroySpeed  = 2.5;
		
			float4 specularGloss = tex2D(specularMap, input.texCoord);
			material.tsNormal 	= DecodeNormal( tex2D(normalMap, input.texCoord) );			
			material.specular	= specularGloss.rgb;
			material.gloss		= specularGloss.a;
			
			float opacity       = paramSlow(param,destroySpeed);
			float maturityPulse = (1 + cos(time * 4)) * 2;

			material.albedo = tex2D(albedoMap, input.texCoord).rgb * connected + (1 - connected) * tex2D(unconnectedAlbedoMap, input.texCoord).rgb;
			material.emissive = (tex2D(emissiveMap, input.texCoord).rgb * (connected + connected * maturity * maturityPulse) + (1 - connected) * tex2D(unconnectedEmissiveMap, input.texCoord).rgb) * f;

            float killWarningPulse = (1 + cos(time * 12)) * 2;
            material.emissive += float3((killWarning * 0.5) + 0.3 * killWarning * killWarningPulse, 0, 0);
            
			// Opacity
			material.opacity = f;
			
			material.id = 1; // to make it glow on Alien vision
		}
	]]>
	</code>

</shader>