<shader>
	
	<inputs>
		<input name="albedoMap" type="texture" address="wrap" />
		<input name="normalMap" type="texture" address="wrap" />
		<input name="specularMap" type="texture" address="wrap" />
		<input name="emissiveMap" type="texture" address="wrap" srgb="true"/>
		<input name="elecMap" type="texture" address="wrap" srgb="true"/>
	</inputs>
	
	<code>
	<![CDATA[
		float3 DecodeNormal(const float4 texNormal)
		{
			float4 n = texNormal * 2 - 1;
			//return float3(n.a, n.g, sqrt(1 - dot(n.ag, n.ag)) );
      return n.xyz;
		}
		void MaterialShader(in Material_Input input, inout Material material)
		{
		
			float4 specularGloss = tex2D(specularMap, input.texCoord);
			float3 glowmask = tex2D(emissiveMap, input.texCoord).rgb;
			float3 lightng = tex2D(elecMap, input.texCoord * 3.67 + float2( time * 2, time * -.05) ).rgb;
			float3 lightng2 = tex2D(elecMap, input.texCoord * 5 + float2( time * 1.37, time * .07) ).rgb;

			material.albedo 	= tex2D(albedoMap, input.texCoord).rgb;
			material.tsNormal 	= DecodeNormal( tex2D(normalMap, input.texCoord) );
			material.specular	= specularGloss.rgb;
			material.gloss		= specularGloss.a;
			material.emissive   	= (( lightng + lightng2) * 6) * glowmask;
			
		}
	]]>		
	</code>

</shader>